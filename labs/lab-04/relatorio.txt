PEDRO CHAMBERLAIN MATOS - 1710883

QUESTÃO 1) 

Elaborar programa para obter o maior e o menor número de um vetor, usando n processos e
memória compartilhada.

-----------------------------------------------------------------------------------------

PROCESSOS.C

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#define NUM_POSITIONS 1000
#define NUM_PROCESSES 1000


int index = 1, max, min, status;
int * vetor = NULL;

void * encontraNum (int * vetor) {
	int ini = index, end = index + 9;

	if (end >= NUM_POSITIONS)
		end = NUM_POSITIONS - 1;

	for (int i = ini; i <= end; ++i) {
		if (vetor[i] > max) {
			max = vetor[i];
			printf("POSIÇÃO %d - NOVA MAX: %d\n", i, max);
		}
		if (vetor[i] < min) {
			min = vetor[i];
			printf("POSIÇÃO %d - NOVA MIN: %d\n", i, min);
		}
	}
}

int main () {
	clock_t start, stop;
	start = clock();

	vetor = (int *) malloc(NUM_POSITIONS * sizeof(int));	
	srand(time(NULL));
	pid_t pid; 

	for(int i = 0; i < NUM_POSITIONS; ++i)
		vetor[i] = rand();
	max = vetor[0]; min = vetor[0];

	for (int i = 0; i < NUM_PROCESSES; ++i)
        if(fork() == 0) 
            exit(0);
    
    for (int i = 0; i < NUM_PROCESSES; ++i) {
		encontraNum(vetor);
		index += 10;
		waitpid (-1, &status, 0);
	}

	stop = clock();

	printf("Maior número encontrado no vetor foi: %d\n", max);
	printf("Menor número encontrado no vetor foi: %d\n", min);
	printf("Tempo gasto com processos: %f\n", (double) (stop - start) / CLOCKS_PER_SEC);
}
-----------------------------------------------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

gcc -o processos processos.c
processos.c:9:5: warning: built-in function ‘index’ declared as non-function
 int index = 1, max, min, status;
     ^~~~~
processos.c: In function ‘main’:
processos.c:49:3: warning: implicit declaration of function ‘waitpid’; did you mean ‘getpid’? [-Wimplicit-function-declaration]
   waitpid (-1, &status, 0);
   ^~~~~~~
   getpid


-----------------------------------------------------------------------------------------

RESULTADO

POSIÇÃO 1 - NOVA MIN: 111846333
POSIÇÃO 2 - NOVA MAX: 1282350682
POSIÇÃO 3 - NOVA MAX: 1784882153
POSIÇÃO 21 - NOVA MAX: 1801353336
POSIÇÃO 22 - NOVA MAX: 1848725245
POSIÇÃO 25 - NOVA MIN: 22955315
POSIÇÃO 29 - NOVA MAX: 2008199014
POSIÇÃO 32 - NOVA MAX: 2120045347
POSIÇÃO 53 - NOVA MIN: 18775766
POSIÇÃO 136 - NOVA MAX: 2134925186
POSIÇÃO 218 - NOVA MAX: 2144680096
POSIÇÃO 239 - NOVA MIN: 16098594
POSIÇÃO 290 - NOVA MIN: 3242383
POSIÇÃO 558 - NOVA MAX: 2145199680
Maior número encontrado no vetor foi: 2145199680
Menor número encontrado no vetor foi: 3242383
Tempo gasto com processos: 0.032288


-----------------------------------------------------------------------------------------


QUESTÃO 2)

Elaborar programa para obter o maior e o menor número de um vetor, usando n threads.

-----------------------------------------------------------------------------------------

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#define NUM_POSITIONS 1000
#define NUM_THREADS   1000

int index = 1, max, min;
int * vetor = NULL;
double tempo;

void * encontraNum (int * vetor) {
	int ini = index; index += 9;

	if (index >= NUM_POSITIONS)
		index = NUM_POSITIONS - 1;

	for (int i = ini; i <= index; ++i) {
		if (vetor[i] > max) {
			max = vetor[i];
			printf("POSIÇÃO %d - NOVA MAX: %d\n", i, max);
		}
		if (vetor[i] < min) {
			min = vetor[i];
			printf("POSIÇÃO %d - NOVA MIN: %d\n", i, min);
		}
	}

	pthread_exit(NULL);
}

int main() {
	clock_t start, stop;
	start = clock();

	vetor = (int *) malloc(NUM_POSITIONS * sizeof(int));
	srand(time(NULL)); 
	pthread_t threads[NUM_THREADS];
	
	for(int i = 0; i < NUM_POSITIONS; i++)
		vetor[i] = rand();
	max = vetor[0]; min = vetor[0];
	
	for(int i = 0; i < NUM_THREADS; i++) 
		pthread_create(&threads[i], NULL, encontraNum, vetor);

	for(int i = 0; i < NUM_THREADS; i++)
		pthread_join(threads[i], NULL);

	stop = clock();
	

	printf("Maior número encontrado no vetor foi: %d\n", max);
	printf("Menor número encontrado no vetor foi: %d\n", min);
	printf("Tempo gasto com threads: %f\n", (double) (stop - start) / CLOCKS_PER_SEC);
}


-----------------------------------------------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

gcc -o threads threads.c -l pthread
threads.c:9:5: warning: built-in function ‘index’ declared as non-function
 int index = 1, max, min;
     ^~~~~
threads.c: In function ‘main’:
threads.c:46:37: warning: passing argument 3 of ‘pthread_create’ from incompatible pointer type [-Wincompatible-pointer-types]
   pthread_create(&threads[i], NULL, encontraNum, vetor);
                                     ^~~~~~~~~~~
In file included from threads.c:1:0:
/usr/include/pthread.h:234:12: note: expected ‘void * (*)(void *)’ but argument is of type ‘void * (*)(int *)’
 extern int pthread_create (pthread_t *__restrict __newthread,
            ^~~~~~~~~~~~~~

-----------------------------------------------------------------------------------------

RESULTADO

POSIÇÃO 1 - NOVA MAX: 407049793
POSIÇÃO 2 - NOVA MAX: 1011889241
POSIÇÃO 3 - NOVA MAX: 2113971999
POSIÇÃO 10 - NOVA MIN: 248780940
POSIÇÃO 23 - NOVA MIN: 71457507
POSIÇÃO 19 - NOVA MAX: 1364003205
POSIÇÃO 42 - NOVA MIN: 26306574
POSIÇÃO 22 - NOVA MIN: 137578491
POSIÇÃO 56 - NOVA MAX: 2132468118
POSIÇÃO 87 - NOVA MIN: 25072198
POSIÇÃO 106 - NOVA MIN: 10892413
POSIÇÃO 150 - NOVA MAX: 2146828609
POSIÇÃO 155 - NOVA MIN: 462615
Maior número encontrado no vetor foi: 2146828609
Menor número encontrado no vetor foi: 462615
Tempo gasto com threads: 0.041596

