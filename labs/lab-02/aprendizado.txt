Existe uma forma de compartilhar memória entre processos criados por um fork.

Primeiramente, aloca-se a memória em tamanho determinado pelo usuário onde será guardada
o tipo de dado. Para a alocação é utilizado a função shmget. Deve ser informada uma chave
de identificação, o tamanho e um flag de modo de criaçao, dos quais existem vários, estas
sendo as que foram mais utilizadas nos laboratórios:
	- IPC_CREAT: Cria entrada se chave não existe
	- IPC_EXCL: Falha se chave já existe
	- S_IRUSR: Dá permissão de leitura ao dono
	- S_IWUSR: Dá permissão de escrita ao dono
	
Feita a alocação de memória, o identificador da área/segmento (ou shmid, que é guardado
num tipo inteiro), deve ser fornecido a função shmat, que anexa a memória a um
determinado ponteiro. Existem outros dois parâmetros que você não deve se preocupar
no momento. Como a função retorna um ponteiro sem tipo, você precisa designar um tipo
para o ponteiro, como por exemplo: (int *) shmat(shmid, 0, 0);

Para desanexar a memória, utilizamos a função shmdt, que recebe o ponteiro.

Posteriormente, para limpar a memória do segmento, utilizamos a função shmctl, que
recebe o shmid, um segundo parâmetro com a flag IPC_RMID, que manda uma mensagem para
o sistema para remover a memória compartilhada identificada pelo shmid, e outro parâmetro
que não é do nosso interesse atualmente.
