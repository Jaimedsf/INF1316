NAGIB MOURA SUAID - 1710839
PEDRO CHAMBERLAIN MATOS - 1710883

QUESTÃO 1) 

O que acontece se alterarmos o local da chamada waitpid() no programa 
(para depois da printf)?

-----------------------------------------------------------------------------------------

LAB-03.C

#include <stdio.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
	int segmento, *p, id, pid, status;
	// aloca a memória compartilhada
	segmento = shmget (IPC_PRIVATE, sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	// associa a memória compartilhada ao processo
	p = (int *) shmat(segmento, 0, 0); // comparar o retorno com -1
	*p = 0;
	
	if ((id = fork()) < 0) {
		puts("Erro na criação do novo processo");
		exit(-2);
	}
	else if (id == 0) {
		for (int i = 0; i < 200; ++i) {
			*p += 5;
			printf("Processo filho | *p = %d\n", *p);
		}
	}
	else {
		for (int i = 0; i < 200; ++i) {
			*p += 10;
			printf("Processo pai | *p = %d\n", *p);
		}
		pid = wait(&status);
	}
	
	// libera a memória compartilhada do processo
	shmdt(p);
	// libera a memória compartilhada
	shmctl(segmento, IPC_RMID, 0);
	
	return 0;
}

-----------------------------------------------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

gcc -o lab-03 lab-03.c
lab-03.c: In function ‘main’:
lab-03.c:17:3: warning: implicit declaration of function ‘exit’ [-Wimplicit-function-declaration]
   exit(-2);
   ^~~~
lab-03.c:17:3: warning: incompatible implicit declaration of built-in function ‘exit’
lab-03.c:17:3: note: include ‘<stdlib.h>’ or provide a declaration of ‘exit’
lab-03.c:6:1:
+#include <stdlib.h>
 
lab-03.c:17:3:
   exit(-2);
   ^~~~
./lab-03



-----------------------------------------------------------------------------------------

RESULTADO

Processo pai | *p = 10
Processo pai | *p = 25
Processo pai | *p = 35
Processo pai | *p = 45
Processo pai | *p = 55
Processo pai | *p = 65
Processo pai | *p = 75
Processo pai | *p = 85
Processo pai | *p = 95
Processo pai | *p = 105
Processo pai | *p = 115
Processo pai | *p = 125
Processo pai | *p = 135
Processo pai | *p = 145
Processo pai | *p = 155
Processo pai | *p = 165
Processo pai | *p = 175
Processo pai | *p = 185
Processo filho | *p = 15
Processo pai | *p = 195
Processo filho | *p = 200
Processo pai | *p = 210
Processo filho | *p = 215
Processo pai | *p = 225
Processo filho | *p = 230
Processo pai | *p = 240
Processo filho | *p = 245
Processo pai | *p = 255
Processo filho | *p = 260
Processo pai | *p = 270
Processo filho | *p = 275
Processo pai | *p = 285
Processo filho | *p = 290
Processo pai | *p = 300
Processo filho | *p = 305
Processo pai | *p = 315
Processo filho | *p = 320
Processo pai | *p = 330
Processo filho | *p = 335
Processo pai | *p = 345
Processo filho | *p = 350
Processo pai | *p = 360
Processo filho | *p = 365
Processo pai | *p = 375
Processo filho | *p = 380
Processo pai | *p = 390
Processo filho | *p = 395
Processo pai | *p = 405
Processo filho | *p = 410
Processo pai | *p = 420
Processo filho | *p = 425
Processo pai | *p = 435
Processo filho | *p = 440
Processo pai | *p = 450
Processo filho | *p = 455
Processo pai | *p = 465
Processo filho | *p = 470
Processo pai | *p = 480
Processo filho | *p = 485
Processo pai | *p = 495
Processo filho | *p = 500
Processo pai | *p = 510
Processo filho | *p = 515
Processo pai | *p = 525
Processo filho | *p = 530
Processo pai | *p = 540
Processo filho | *p = 545
Processo pai | *p = 555
Processo filho | *p = 560
Processo pai | *p = 570
Processo filho | *p = 575
Processo pai | *p = 585
Processo filho | *p = 590
Processo pai | *p = 600
Processo filho | *p = 605
Processo pai | *p = 615
Processo pai | *p = 630
Processo pai | *p = 640
Processo pai | *p = 650
Processo filho | *p = 620
Processo pai | *p = 660
Processo filho | *p = 665
Processo pai | *p = 675
Processo filho | *p = 680
Processo pai | *p = 690
Processo filho | *p = 695
Processo pai | *p = 705
Processo filho | *p = 710
Processo pai | *p = 720
Processo filho | *p = 725
Processo pai | *p = 735
Processo filho | *p = 740
Processo pai | *p = 750
Processo filho | *p = 755
Processo pai | *p = 765
Processo filho | *p = 770
Processo pai | *p = 780
Processo filho | *p = 785
Processo pai | *p = 795
Processo filho | *p = 800
Processo pai | *p = 810
Processo filho | *p = 815
Processo pai | *p = 825
Processo filho | *p = 830
Processo pai | *p = 840
Processo filho | *p = 845
Processo pai | *p = 855
Processo filho | *p = 860
Processo pai | *p = 870
Processo filho | *p = 875
Processo pai | *p = 885
Processo filho | *p = 890
Processo pai | *p = 900
Processo filho | *p = 905
Processo pai | *p = 915
Processo filho | *p = 920
Processo pai | *p = 930
Processo filho | *p = 935
Processo pai | *p = 945
Processo filho | *p = 950
Processo pai | *p = 960
Processo filho | *p = 965
Processo pai | *p = 975
Processo filho | *p = 980
Processo pai | *p = 990
Processo filho | *p = 995
Processo pai | *p = 1005
Processo filho | *p = 1010
Processo pai | *p = 1020
Processo filho | *p = 1025
Processo pai | *p = 1035
Processo filho | *p = 1040
Processo pai | *p = 1050
Processo filho | *p = 1055
Processo pai | *p = 1065
Processo filho | *p = 1070
Processo pai | *p = 1080
Processo filho | *p = 1085
Processo pai | *p = 1095
Processo filho | *p = 1100
Processo pai | *p = 1110
Processo filho | *p = 1115
Processo pai | *p = 1125
Processo filho | *p = 1130
Processo pai | *p = 1140
Processo filho | *p = 1145
Processo pai | *p = 1155
Processo filho | *p = 1160
Processo pai | *p = 1170
Processo filho | *p = 1175
Processo pai | *p = 1185
Processo filho | *p = 1190
Processo pai | *p = 1200
Processo filho | *p = 1205
Processo pai | *p = 1215
Processo filho | *p = 1220
Processo pai | *p = 1230
Processo filho | *p = 1235
Processo pai | *p = 1245
Processo filho | *p = 1250
Processo pai | *p = 1260
Processo filho | *p = 1265
Processo pai | *p = 1275
Processo filho | *p = 1280
Processo pai | *p = 1290
Processo filho | *p = 1295
Processo pai | *p = 1305
Processo filho | *p = 1310
Processo pai | *p = 1320
Processo filho | *p = 1325
Processo pai | *p = 1335
Processo filho | *p = 1340
Processo pai | *p = 1350
Processo filho | *p = 1355
Processo pai | *p = 1365
Processo filho | *p = 1370
Processo pai | *p = 1380
Processo filho | *p = 1385
Processo pai | *p = 1395
Processo filho | *p = 1400
Processo pai | *p = 1410
Processo filho | *p = 1415
Processo pai | *p = 1425
Processo filho | *p = 1430
Processo pai | *p = 1440
Processo filho | *p = 1445
Processo pai | *p = 1455
Processo filho | *p = 1460
Processo pai | *p = 1470
Processo filho | *p = 1475
Processo pai | *p = 1485
Processo filho | *p = 1490
Processo pai | *p = 1500
Processo filho | *p = 1505
Processo pai | *p = 1515
Processo filho | *p = 1520
Processo pai | *p = 1530
Processo filho | *p = 1535
Processo pai | *p = 1545
Processo filho | *p = 1550
Processo pai | *p = 1560
Processo filho | *p = 1565
Processo pai | *p = 1575
Processo filho | *p = 1580
Processo pai | *p = 1590
Processo filho | *p = 1595
Processo pai | *p = 1605
Processo filho | *p = 1610
Processo pai | *p = 1620
Processo filho | *p = 1625
Processo pai | *p = 1635
Processo filho | *p = 1640
Processo pai | *p = 1650
Processo filho | *p = 1655
Processo pai | *p = 1665
Processo filho | *p = 1670
Processo pai | *p = 1680
Processo filho | *p = 1685
Processo pai | *p = 1695
Processo filho | *p = 1700
Processo pai | *p = 1710
Processo filho | *p = 1715
Processo pai | *p = 1725
Processo filho | *p = 1730
Processo pai | *p = 1740
Processo filho | *p = 1745
Processo pai | *p = 1755
Processo filho | *p = 1760
Processo pai | *p = 1770
Processo filho | *p = 1775
Processo pai | *p = 1785
Processo filho | *p = 1790
Processo pai | *p = 1800
Processo filho | *p = 1805
Processo pai | *p = 1815
Processo filho | *p = 1820
Processo pai | *p = 1830
Processo filho | *p = 1835
Processo pai | *p = 1845
Processo filho | *p = 1850
Processo pai | *p = 1860
Processo filho | *p = 1865
Processo pai | *p = 1875
Processo filho | *p = 1880
Processo pai | *p = 1890
Processo filho | *p = 1895
Processo pai | *p = 1905
Processo filho | *p = 1910
Processo pai | *p = 1920
Processo filho | *p = 1925
Processo pai | *p = 1935
Processo filho | *p = 1940
Processo pai | *p = 1950
Processo filho | *p = 1955
Processo pai | *p = 1965
Processo filho | *p = 1970
Processo pai | *p = 1980
Processo filho | *p = 1985
Processo pai | *p = 1995
Processo filho | *p = 2000
Processo pai | *p = 2010
Processo filho | *p = 2015
Processo pai | *p = 2025
Processo filho | *p = 2030
Processo pai | *p = 2040
Processo filho | *p = 2045
Processo pai | *p = 2055
Processo filho | *p = 2060
Processo pai | *p = 2070
Processo filho | *p = 2075
Processo pai | *p = 2085
Processo filho | *p = 2090
Processo pai | *p = 2100
Processo filho | *p = 2105
Processo pai | *p = 2115
Processo filho | *p = 2120
Processo pai | *p = 2130
Processo filho | *p = 2135
Processo pai | *p = 2145
Processo filho | *p = 2150
Processo pai | *p = 2160
Processo filho | *p = 2165
Processo pai | *p = 2175
Processo filho | *p = 2180
Processo pai | *p = 2190
Processo filho | *p = 2195
Processo pai | *p = 2205
Processo filho | *p = 2210
Processo pai | *p = 2220
Processo filho | *p = 2225
Processo pai | *p = 2235
Processo filho | *p = 2240
Processo pai | *p = 2250
Processo filho | *p = 2255
Processo pai | *p = 2265
Processo filho | *p = 2270
Processo pai | *p = 2280
Processo filho | *p = 2285
Processo pai | *p = 2295
Processo filho | *p = 2300
Processo pai | *p = 2310
Processo filho | *p = 2315
Processo pai | *p = 2325
Processo filho | *p = 2330
Processo pai | *p = 2340
Processo filho | *p = 2345
Processo pai | *p = 2355
Processo filho | *p = 2360
Processo pai | *p = 2370
Processo filho | *p = 2375
Processo pai | *p = 2385
Processo filho | *p = 2390
Processo pai | *p = 2400
Processo filho | *p = 2405
Processo pai | *p = 2415
Processo filho | *p = 2420
Processo pai | *p = 2430
Processo filho | *p = 2435
Processo pai | *p = 2445
Processo filho | *p = 2450
Processo pai | *p = 2460
Processo filho | *p = 2465
Processo pai | *p = 2475
Processo filho | *p = 2480
Processo pai | *p = 2490
Processo filho | *p = 2495
Processo pai | *p = 2505
Processo filho | *p = 2510
Processo pai | *p = 2520
Processo filho | *p = 2525
Processo pai | *p = 2535
Processo filho | *p = 2540
Processo pai | *p = 2550
Processo filho | *p = 2555
Processo pai | *p = 2565
Processo filho | *p = 2570
Processo pai | *p = 2580
Processo filho | *p = 2585
Processo pai | *p = 2595
Processo filho | *p = 2600
Processo pai | *p = 2610
Processo filho | *p = 2615
Processo pai | *p = 2625
Processo filho | *p = 2630
Processo pai | *p = 2640
Processo filho | *p = 2645
Processo pai | *p = 2655
Processo filho | *p = 2660
Processo pai | *p = 2670
Processo filho | *p = 2675
Processo pai | *p = 2685
Processo filho | *p = 2690
Processo pai | *p = 2700
Processo filho | *p = 2705
Processo pai | *p = 2715
Processo filho | *p = 2720
Processo pai | *p = 2730
Processo filho | *p = 2735
Processo pai | *p = 2745
Processo filho | *p = 2750
Processo pai | *p = 2760
Processo filho | *p = 2765
Processo pai | *p = 2775
Processo filho | *p = 2780
Processo pai | *p = 2790
Processo filho | *p = 2795
Processo pai | *p = 2805
Processo filho | *p = 2810
Processo pai | *p = 2820
Processo filho | *p = 2825
Processo pai | *p = 2835
Processo filho | *p = 2840
Processo pai | *p = 2850
Processo filho | *p = 2855
Processo pai | *p = 2865
Processo filho | *p = 2870
Processo pai | *p = 2880
Processo filho | *p = 2885
Processo pai | *p = 2895
Processo filho | *p = 2900
Processo filho | *p = 2905
Processo filho | *p = 2910
Processo filho | *p = 2915
Processo filho | *p = 2920
Processo filho | *p = 2925
Processo filho | *p = 2930
Processo filho | *p = 2935
Processo filho | *p = 2940
Processo filho | *p = 2945
Processo filho | *p = 2950
Processo filho | *p = 2955
Processo filho | *p = 2960
Processo filho | *p = 2965
Processo filho | *p = 2970
Processo filho | *p = 2975
Processo filho | *p = 2980
Processo filho | *p = 2985
Processo filho | *p = 2990
Processo filho | *p = 2995
Processo filho | *p = 3000


-----------------------------------------------------------------------------------------

CONCLUSÃO

Quando alteramos o local da chamada waitpid(), os processos passam a concorrer entre si,
ocasionando acessos simultâneos a área de memória e possibilitando inconsistências nas
respostas do programa, como por exemplo na resposta do programa abaixo:

Processo filho | *p = 590
Processo pai | *p = 600
Processo filho | *p = 605
Processo pai | *p = 615
Processo pai | *p = 630
Processo pai | *p = 640
Processo pai | *p = 650
Processo filho | *p = 620
Processo pai | *p = 660
Processo filho | *p = 665
Processo pai | *p = 675
Processo filho | *p = 680

-----------------------------------------------------------------------------------------


QUESTÃO 2)

Faça um programa que:
- Leia uma mensagem do dia
- Crie uma memória compartilhada com a chave 8765
- Salve a mensagem na memória

Faça um outro programa que utilize a mesma chave (8765)
e exiba a mensagem do dia para o usuário

-----------------------------------------------------------------------------------------

LAB-04A.C

#include <stdio.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>

int main (void) {
	char *p;
	int segmento, id, pid, status;
	// aloca a memória compartilhada
	segmento = shmget (8765, 10 * sizeof(char), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
	printf("%d\n",segmento);
	p = (char *) shmat(segmento, 0, 0); // comparar o retorno com -1
	
	printf("Insira uma mensagem do dia\n");
	scanf("%[^\n]", p);
	printf("\n%s",p);
	
	sleep(30);
	// libera a memória compartilhada do processo
	shmdt(p);
	// libera a memória compartilhada
	shmctl(segmento, IPC_RMID, 0);
	
	return 0;
}

LAB-04B.C

#include <stdio.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main (void) {
	char *p;
	int id;
	
	scanf("%d",&id);
	p = shmat(id, 0, 0);
	printf("string - %s\n", p);
	
	return 0;
}

-----------------------------------------------------------------------------------------

COMPILAÇÃO E EXECUÇÃO


gcc -o lab-04a lab-04a.c
gcc -o lab-04b lab-04b.c


-----------------------------------------------------------------------------------------

RESULTADO

(> = insere valor)

[TERMINAL 1]
2228240
Insira uma mensagem do dia
> alo mundo

[TERMINAL 2]
> 2228240
id - 2228240
string - alo mundo


-----------------------------------------------------------------------------------------

QUESTÃO 3)

Faça um programa paralelo para localizar uma chave em um vetor:
- Crie uma memória compartilhada com dados desordenados e 
  a divida pelo número de processos
- Cada processo deve procurar o dado na sua área de memória
  e informar a posição onde o dado foi localizado.

-----------------------------------------------------------------------------------------

LAB-05.C

#include <stdio.h>
#include<stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main (int argc, char *argv[])
{
   int segmento, *p, id, status;
   int i,j, min, max;
   int procurados[]={4,16,7,361,144};
   
   // aloca a memória compartilhada
   segmento = shmget (IPC_PRIVATE, 20*sizeof (int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
   // associa a memória compartilhada ao processo
   
   p = (int *) shmat (segmento, 0, 0); // comparar o retorno com -1
   
   for(i=0;i<20;i++){
      p[i]=i*i;
   }
   
 
   
   for (i=0;i<4;i++){
   
   
      if ((id = fork()) < 0)
      {
 
         puts ("Erro na criação do novo processo");
         exit (-2);
 
      }
      else if (id == 0)
      {
 
         min=i*5;
         max=i*5+5;
         break;
 
      }
      else
      {
 
         continue;
         
 
      }
   }
   
   if (id !=0){
         wait (&status);
         wait (&status);
         wait (&status);
         wait (&status);
         shmdt (p);
         shmctl (segmento, IPC_RMID, 0);
         return 0;
   }
   else{
      for(i=min; i<max; i++){
         for(j=0;j<5;j++){
            if(procurados[j] == p[i])
               printf("%d encontrado na posicao %d\n",procurados[j],i);
         }
      }  
         
      // libera a memória compartilhada do processo
      shmdt (p);
      // libera a memória compartilhada
     
      return 0;
   }
}

-----------------------------------------------------------------------------------------

COMPILAÇÃO E EXECUÇÃO

gcc -Wall -o lab-05 lab-05.c

-----------------------------------------------------------------------------------------

RESULTADO

4 encontrado na posicao 2
16 encontrado na posicao 4
361 encontrado na posicao 19
144 encontrado na posicao 12

